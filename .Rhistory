set <- function(y) {
x <<- y
m <<- NULL
}
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
make
solve(x)
}
cacheSolve(x)
makeCacheMatrix(x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(x)
makeCacheMatrix(rnorm(1:100))
rnorm(1:100)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(10)
makeVector(10:100)
makeVector(c(1,2,3,4,5))
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if (!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
B <- matrix
B <- matrix(c(1,2,3,4),2,2)
B
makeCacheMatrix(B)
B1 <- makeCacheMatrix(B)
B1
cacheSolve(B1)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m <- solve(data, ...)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
data <- x$get()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
makeCacheMatrix(B)
M1 <- makeCacheMatrix(B)
cacheSolve(M1)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
